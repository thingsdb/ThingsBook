<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xml:lang="en" lang="en">
<head>
<title>15.7.1 Quiz - Answers</title>
<link rel="stylesheet" type="text/css" href="css/epub.css" />
</head>
<body>
<section class="sect2">
    <h4 id="ch15_7_1_h" class="title">15.7.1 Quiz - Answers</h4>
    <ol class="quiz">
        <li><p>Waiting, for about 20 seconds, depending on the size and performance, is only essential for the second node as it synchronizes from the first. Subsequent nodes can leverage any existing node, allowing the cluster to remain responsive to queries during the process.</p></li>
        <li><p>Joining a new ThingsDB node to an existing cluster requires the <code class="inline">--secret &lt;SECRET&gt;</code> argument only once during initial node startup. This secret tells the node to wait for an invite and serves as a security measure as it prevents unauthorized nodes from joining by requiring the same secret within the <code class="inline">new_node()</code> function.</p></li>
        <li><p>The answer is "e", all of the above. By adhering to these best practices, you can create a robust and reliable multi-node ThingsDB environment that delivers consistent performance and efficient data management.</p></li>
        <li><p>Answer "c". ThingsDB provides two methods to modify the log level. The <code class="inline">--log-level</code> command-line argument sets the initial log level when starting the node and the <code class="inline">set_log_level()</code> function in the node scope dynamically adjusts the log level during runtime.</p></li>
        <li><p>To enable the HTTP status port in ThingsDB, set the <code class="inline">THINGSDB_HTTP_STATUS_PORT</code>
            environment variable and restart the node. (e.g. <code class="inline">THINGSDB_HTTP_STATUS_PORT=8080</code>).
            While less common, ThingsDB also allows you to configure the HTTP status port within a configuration file.
            Refer to the official documentation for more information: <a href="https://docs.thingsdb.io/v1/getting-started/configuration/">https://docs.thingsdb.io/v1/getting-started/configuration/</a></p></li>
        <li><p>The reference count is 2. Both <code class="inline">t</code> and the <code class="inline">refs()</code> function hold a reference, leading to a total of 2.</p></li>
        <li><p>Your second query might hit a node that has not yet received the update to property <code class="inline">.x</code>, leading to the unexpected result.</p>
            <p>There are two main solutions to address this:</p>
            <ul>
                <li>Combine read and write in a single query: This ensures both operations happen on the same node, guaranteeing you read the latest value of <code class="inline">.x</code>.</li>
                <li>Enforce write ordering with <code class="inline">wse()</code>: If combining read and write is not an option, you can use the <code class="inline">wse()</code> function. This enforces a <em>change</em>, effectively forcing subsequent queries to wait for the change to propagate before responding. This guarantees eventual consistency but can introduce a slight performance overhead.</li>
            </ul>
        </li>
    </ol>
</section>
</body>
</html>
